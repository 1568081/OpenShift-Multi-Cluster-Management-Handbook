apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-deploy-dev
spec:
  workspaces:
  - name: shared-workspace
  params:
  - name: deployment-name
    type: string
    description: name of the deployment to be patched
  - name: git-url
    type: string
    description: url of the git repo for the code of deployment
  - name: git-revision
    type: string
    description: revision to be used from repo of the code for deployment
    default: "main"
  - name: IMAGE
    type: string
    description: image to be build from the code
  - name: CONTEXT
    type: string
    description: Path to the application source code directory   
    default: "./sample-go-app/clouds-api/"
  - name: argocd-project-manifest
    type: string
    description: path to the argocd app manifest
    default: "./chapter07/config/argocd/argocd-project.yaml"       
  - name: app-manifest
    type: string
    description: path to the argocd app manifest
    default: "./chapter07/config/argocd/argocd-app-dev.yaml"    
  - name: namespace
    type: string
    description: namespace which the application will be deployed
  tasks:
  - name: fetch-repository
    taskRef:
      name: git-clone
      kind: ClusterTask
    workspaces:
    - name: output
      workspace: shared-workspace
    params:
    - name: url
      value: $(params.git-url)
    - name: subdirectory
      value: ""
    - name: deleteExisting
      value: "true"
    - name: revision
      value: $(params.git-revision)
  - name: golang-unit-test
    taskRef:
      name: golang-unit-test
    params:
    - name: context
      value: $(params.CONTEXT)
    - name: module-name
      value: "clouds"
    workspaces:
    - name: source
      workspace: shared-workspace      
    runAfter:
    - fetch-repository   
  - name: build-image
    taskRef:
      name: buildah
      kind: ClusterTask
    params:
    - name: IMAGE
      value: $(params.IMAGE)
    - name: CONTEXT
      value: $(params.CONTEXT)      
    workspaces:
    - name: source
      workspace: shared-workspace
    runAfter:
    - golang-unit-test
  - name: create-argocd-project
    taskRef:
      name: apply-manifest-file
    params:
    - name: manifest
      value: $(params.argocd-project-manifest)      
    workspaces:
    - name: source
      workspace: shared-workspace
    runAfter:
    - build-image     
  - name: deploy-app-with-argocd
    taskRef:
      name: apply-manifest-file
    params:
    - name: manifest
      value: $(params.app-manifest)      
    workspaces:
    - name: source
      workspace: shared-workspace
    runAfter:
    - create-argocd-project       
  - name: check-app-health
    taskRef:
      name: check-app-health
    params:
    - name: deployment
      value: $(params.deployment-name)
    - name: namespace
      value: $(params.namespace)      
    runAfter:
    - deploy-app-with-argocd   
